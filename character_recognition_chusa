{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/leehgkor/lhg/blob/main/character_recognition_chusa_val_222_ipynb%EC%9D%98_%EC%82%AC%EB%B3%B8%EC%9D%98_%EC%82%AC%EB%B3%B8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NBtR9sqW6Te2"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torchvision import datasets, transforms\n",
        "from matplotlib import pyplot as plt\n",
        "%matplotlib inline\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTgbta9b-v3y",
        "outputId": "4641cb26-57ca-4b08-9a43-11cd2e0dcdea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QRc9zb0f6Te5",
        "outputId": "c86d93ef-93d0-401a-a1cd-00704cf0be4b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "\n",
        "USE_CUDA = torch.cuda.is_available()\n",
        "DEVICE = torch.device('cuda' if USE_CUDA else 'cpu')\n",
        "\n",
        "BATCH_SIZE = 50\n",
        "EPOCH = 20\n",
        "\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision.datasets import ImageFolder\n",
        "\n",
        "transform_base = transforms.Compose([transforms.Resize((128,128)), transforms.ToTensor()])\n",
        "train_dataset = ImageFolder(root='/content/drive/MyDrive/splitted9/train', transform=transform_base)\n",
        "val_dataset = ImageFolder(root='/content/drive/MyDrive/splitted9/val', transform=transform_base)\n",
        "\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4)\n",
        "val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=4)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('학습 데이터셋 크기:', len(train_dataset))\n",
        "print('검증 데이터셋 크기:', len(val_dataset))\n",
        "\n",
        "class_names = train_dataset.classes\n",
        "print('클래스 수', len(class_names))\n",
        "print('클래스:', class_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eo8fL0VlRx9F",
        "outputId": "8db3bce9-0cae-47b3-b989-fd04265f2683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "학습 데이터셋 크기: 1723\n",
            "검증 데이터셋 크기: 550\n",
            "클래스 수 83\n",
            "클래스: ['가', '개', '거', '겨', '고', '그', '긔', '기', '나', '난2', '내', '내2', '녀', '년', '념', '녕', '노', '니', '님', '다', '답', '대', '대2', '더', '도', '동', '되', '들', '러', '려', '로', '리', '마', '만', '며', '모', '못', '뫼', '무', '미', '보', '사2', '삽2', '샹', '셔', '슈', '시', '신', '아', '안', '압2', '야', '양', '어', '업', '엇', '여', '오', '온', '올', '와', '월', '으', '은', '을', '의', '이', '인', '일', '입', '잇', '자2', '장', '재점', '졔', '지', '직', '친', '편', '하2', '한2', '후', '히']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7FroZ23s6Te6"
      },
      "source": [
        "이미지 transform"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BbQ0qx9X6Te8",
        "outputId": "24f66bd3-3a80-427b-972c-3f413435c6db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ],
      "source": [
        "from torchvision.transforms.transforms import ColorJitter\n",
        "data_transforms = {\n",
        "    'train': transforms.Compose([\n",
        "        transforms.Resize([128,128]),\n",
        "        transforms.RandomRotation(5, expand=False),\n",
        "        transforms.RandomGrayscale(),\n",
        "        transforms.ColorJitter(brightness=(0.5, 1.5)),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ]),\n",
        "    'val': transforms.Compose([\n",
        "        transforms.Resize([128,128]),\n",
        "        #transforms.Grayscale(),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ])\n",
        "}\n",
        "\n",
        "data_dir = '/content/drive/MyDrive/splitted9'\n",
        "image_datasets = {x: ImageFolder(root=os.path.join(data_dir, x), transform=data_transforms[x]) for x in ['train', 'val']}\n",
        "dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=BATCH_SIZE, shuffle=True, num_workers=4) for x in ['train','val']}\n",
        "dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n",
        "\n",
        "class_names = image_datasets['train'].classes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GvggbPlB6Te9"
      },
      "source": [
        "모델 불러오기(resnet101을 사용), 이때, 채널 수와 고정시킬 파라미터를 정해줘야 하겠음."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install efficientnet_pytorch"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u0OPTK79WIk2",
        "outputId": "33650158-06b4-412b-f5f9-b6fe5cb714ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting efficientnet_pytorch\n",
            "  Downloading efficientnet_pytorch-0.7.1.tar.gz (21 kB)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from efficientnet_pytorch) (1.10.0+cu111)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch->efficientnet_pytorch) (3.10.0.2)\n",
            "Building wheels for collected packages: efficientnet-pytorch\n",
            "  Building wheel for efficientnet-pytorch (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for efficientnet-pytorch: filename=efficientnet_pytorch-0.7.1-py3-none-any.whl size=16446 sha256=fadd637ccf7367f609f4a53f76e758208dc232f1169d15a481c4c00975fc747d\n",
            "  Stored in directory: /root/.cache/pip/wheels/0e/cc/b2/49e74588263573ff778da58cc99b9c6349b496636a7e165be6\n",
            "Successfully built efficientnet-pytorch\n",
            "Installing collected packages: efficientnet-pytorch\n",
            "Successfully installed efficientnet-pytorch-0.7.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KIWfk61H6Te-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88,
          "referenced_widgets": [
            "d666054e26924af4bc7c125cb8af843c",
            "b8e75e93c1164398a432357f35f2f09f",
            "5eac87ea963746f79966cde0df82665b",
            "e036303ab5ab42b09871cb5a989f9537",
            "96f182f4512040fa8406cb1d763949de",
            "88b52903779641ae9bdd40306538ed5e",
            "20a51ba852494031ad1b916ec09bb55e",
            "26241335e2914722b67a12ef487c8f7f",
            "e5497e555f1e4bb398d469c7ef343ca7",
            "bfd3a453aaaf443ca821b3ae7c4d47b9",
            "f5a531ce0f8d4dcca8d525466a0ca1f3"
          ]
        },
        "outputId": "be14d8f2-03f3-48a0-c77c-16632af99853"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth\" to /root/.cache/torch/hub/checkpoints/resnext50_32x4d-7cdf4587.pth\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0.00/95.8M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d666054e26924af4bc7c125cb8af843c"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "from torchvision import models\n",
        "from torch.optim import lr_scheduler\n",
        "\n",
        "#from efficientnet_pytorch import EfficientNet\n",
        "#resnet = EfficientNet.from_pretrained('efficientnet-b7', num_classes=83)\n",
        "resnet = models.resnext50_32x4d(pretrained=True)\n",
        "num_ftrs = resnet.fc.in_features\n",
        "\n",
        "# 출력 채널 수 바꾸기\n",
        "resnet.fc = nn.Linear(num_ftrs, 83)\n",
        "resnet = resnet.to(DEVICE)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "#러닝 레이트를 점점 작게해주는 스케줄러 step size는 조정 필요\n",
        "optimizer_ft = optim.Adam(filter(lambda p: p.requires_grad, resnet.parameters()), lr=0.001)\n",
        "exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=3, gamma=0.5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qjSmuQum6Te_"
      },
      "source": [
        "일부 레이어를 프리즈하기. 이때,param.requires_grad를 False로 지정하면 업데이트되지 않는다는 것임.\n",
        "ct < 6 은 resnet이 10번의 파라미터가 있는데, 그 중 1-5를 고정한 것임. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OhALgCcv6TfA"
      },
      "outputs": [],
      "source": [
        "ct = 0\n",
        "for child in resnet.children():\n",
        "    ct += 1\n",
        "    if ct < 3:\n",
        "        for param in child.parameters():\n",
        "            param.requires_grad = False"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchsummary import summary\n",
        "summary(resnet, input_size=(3, 128, 128))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7bjleUqzvnxT",
        "outputId": "db3eeade-2e02-4e71-c472-1751ccbaa11f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 64, 64, 64]           9,408\n",
            "       BatchNorm2d-2           [-1, 64, 64, 64]             128\n",
            "              ReLU-3           [-1, 64, 64, 64]               0\n",
            "         MaxPool2d-4           [-1, 64, 32, 32]               0\n",
            "            Conv2d-5          [-1, 128, 32, 32]           8,192\n",
            "       BatchNorm2d-6          [-1, 128, 32, 32]             256\n",
            "              ReLU-7          [-1, 128, 32, 32]               0\n",
            "            Conv2d-8          [-1, 128, 32, 32]           4,608\n",
            "       BatchNorm2d-9          [-1, 128, 32, 32]             256\n",
            "             ReLU-10          [-1, 128, 32, 32]               0\n",
            "           Conv2d-11          [-1, 256, 32, 32]          32,768\n",
            "      BatchNorm2d-12          [-1, 256, 32, 32]             512\n",
            "           Conv2d-13          [-1, 256, 32, 32]          16,384\n",
            "      BatchNorm2d-14          [-1, 256, 32, 32]             512\n",
            "             ReLU-15          [-1, 256, 32, 32]               0\n",
            "       Bottleneck-16          [-1, 256, 32, 32]               0\n",
            "           Conv2d-17          [-1, 128, 32, 32]          32,768\n",
            "      BatchNorm2d-18          [-1, 128, 32, 32]             256\n",
            "             ReLU-19          [-1, 128, 32, 32]               0\n",
            "           Conv2d-20          [-1, 128, 32, 32]           4,608\n",
            "      BatchNorm2d-21          [-1, 128, 32, 32]             256\n",
            "             ReLU-22          [-1, 128, 32, 32]               0\n",
            "           Conv2d-23          [-1, 256, 32, 32]          32,768\n",
            "      BatchNorm2d-24          [-1, 256, 32, 32]             512\n",
            "             ReLU-25          [-1, 256, 32, 32]               0\n",
            "       Bottleneck-26          [-1, 256, 32, 32]               0\n",
            "           Conv2d-27          [-1, 128, 32, 32]          32,768\n",
            "      BatchNorm2d-28          [-1, 128, 32, 32]             256\n",
            "             ReLU-29          [-1, 128, 32, 32]               0\n",
            "           Conv2d-30          [-1, 128, 32, 32]           4,608\n",
            "      BatchNorm2d-31          [-1, 128, 32, 32]             256\n",
            "             ReLU-32          [-1, 128, 32, 32]               0\n",
            "           Conv2d-33          [-1, 256, 32, 32]          32,768\n",
            "      BatchNorm2d-34          [-1, 256, 32, 32]             512\n",
            "             ReLU-35          [-1, 256, 32, 32]               0\n",
            "       Bottleneck-36          [-1, 256, 32, 32]               0\n",
            "           Conv2d-37          [-1, 256, 32, 32]          65,536\n",
            "      BatchNorm2d-38          [-1, 256, 32, 32]             512\n",
            "             ReLU-39          [-1, 256, 32, 32]               0\n",
            "           Conv2d-40          [-1, 256, 16, 16]          18,432\n",
            "      BatchNorm2d-41          [-1, 256, 16, 16]             512\n",
            "             ReLU-42          [-1, 256, 16, 16]               0\n",
            "           Conv2d-43          [-1, 512, 16, 16]         131,072\n",
            "      BatchNorm2d-44          [-1, 512, 16, 16]           1,024\n",
            "           Conv2d-45          [-1, 512, 16, 16]         131,072\n",
            "      BatchNorm2d-46          [-1, 512, 16, 16]           1,024\n",
            "             ReLU-47          [-1, 512, 16, 16]               0\n",
            "       Bottleneck-48          [-1, 512, 16, 16]               0\n",
            "           Conv2d-49          [-1, 256, 16, 16]         131,072\n",
            "      BatchNorm2d-50          [-1, 256, 16, 16]             512\n",
            "             ReLU-51          [-1, 256, 16, 16]               0\n",
            "           Conv2d-52          [-1, 256, 16, 16]          18,432\n",
            "      BatchNorm2d-53          [-1, 256, 16, 16]             512\n",
            "             ReLU-54          [-1, 256, 16, 16]               0\n",
            "           Conv2d-55          [-1, 512, 16, 16]         131,072\n",
            "      BatchNorm2d-56          [-1, 512, 16, 16]           1,024\n",
            "             ReLU-57          [-1, 512, 16, 16]               0\n",
            "       Bottleneck-58          [-1, 512, 16, 16]               0\n",
            "           Conv2d-59          [-1, 256, 16, 16]         131,072\n",
            "      BatchNorm2d-60          [-1, 256, 16, 16]             512\n",
            "             ReLU-61          [-1, 256, 16, 16]               0\n",
            "           Conv2d-62          [-1, 256, 16, 16]          18,432\n",
            "      BatchNorm2d-63          [-1, 256, 16, 16]             512\n",
            "             ReLU-64          [-1, 256, 16, 16]               0\n",
            "           Conv2d-65          [-1, 512, 16, 16]         131,072\n",
            "      BatchNorm2d-66          [-1, 512, 16, 16]           1,024\n",
            "             ReLU-67          [-1, 512, 16, 16]               0\n",
            "       Bottleneck-68          [-1, 512, 16, 16]               0\n",
            "           Conv2d-69          [-1, 256, 16, 16]         131,072\n",
            "      BatchNorm2d-70          [-1, 256, 16, 16]             512\n",
            "             ReLU-71          [-1, 256, 16, 16]               0\n",
            "           Conv2d-72          [-1, 256, 16, 16]          18,432\n",
            "      BatchNorm2d-73          [-1, 256, 16, 16]             512\n",
            "             ReLU-74          [-1, 256, 16, 16]               0\n",
            "           Conv2d-75          [-1, 512, 16, 16]         131,072\n",
            "      BatchNorm2d-76          [-1, 512, 16, 16]           1,024\n",
            "             ReLU-77          [-1, 512, 16, 16]               0\n",
            "       Bottleneck-78          [-1, 512, 16, 16]               0\n",
            "           Conv2d-79          [-1, 512, 16, 16]         262,144\n",
            "      BatchNorm2d-80          [-1, 512, 16, 16]           1,024\n",
            "             ReLU-81          [-1, 512, 16, 16]               0\n",
            "           Conv2d-82            [-1, 512, 8, 8]          73,728\n",
            "      BatchNorm2d-83            [-1, 512, 8, 8]           1,024\n",
            "             ReLU-84            [-1, 512, 8, 8]               0\n",
            "           Conv2d-85           [-1, 1024, 8, 8]         524,288\n",
            "      BatchNorm2d-86           [-1, 1024, 8, 8]           2,048\n",
            "           Conv2d-87           [-1, 1024, 8, 8]         524,288\n",
            "      BatchNorm2d-88           [-1, 1024, 8, 8]           2,048\n",
            "             ReLU-89           [-1, 1024, 8, 8]               0\n",
            "       Bottleneck-90           [-1, 1024, 8, 8]               0\n",
            "           Conv2d-91            [-1, 512, 8, 8]         524,288\n",
            "      BatchNorm2d-92            [-1, 512, 8, 8]           1,024\n",
            "             ReLU-93            [-1, 512, 8, 8]               0\n",
            "           Conv2d-94            [-1, 512, 8, 8]          73,728\n",
            "      BatchNorm2d-95            [-1, 512, 8, 8]           1,024\n",
            "             ReLU-96            [-1, 512, 8, 8]               0\n",
            "           Conv2d-97           [-1, 1024, 8, 8]         524,288\n",
            "      BatchNorm2d-98           [-1, 1024, 8, 8]           2,048\n",
            "             ReLU-99           [-1, 1024, 8, 8]               0\n",
            "      Bottleneck-100           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-101            [-1, 512, 8, 8]         524,288\n",
            "     BatchNorm2d-102            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-103            [-1, 512, 8, 8]               0\n",
            "          Conv2d-104            [-1, 512, 8, 8]          73,728\n",
            "     BatchNorm2d-105            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-106            [-1, 512, 8, 8]               0\n",
            "          Conv2d-107           [-1, 1024, 8, 8]         524,288\n",
            "     BatchNorm2d-108           [-1, 1024, 8, 8]           2,048\n",
            "            ReLU-109           [-1, 1024, 8, 8]               0\n",
            "      Bottleneck-110           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-111            [-1, 512, 8, 8]         524,288\n",
            "     BatchNorm2d-112            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-113            [-1, 512, 8, 8]               0\n",
            "          Conv2d-114            [-1, 512, 8, 8]          73,728\n",
            "     BatchNorm2d-115            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-116            [-1, 512, 8, 8]               0\n",
            "          Conv2d-117           [-1, 1024, 8, 8]         524,288\n",
            "     BatchNorm2d-118           [-1, 1024, 8, 8]           2,048\n",
            "            ReLU-119           [-1, 1024, 8, 8]               0\n",
            "      Bottleneck-120           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-121            [-1, 512, 8, 8]         524,288\n",
            "     BatchNorm2d-122            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-123            [-1, 512, 8, 8]               0\n",
            "          Conv2d-124            [-1, 512, 8, 8]          73,728\n",
            "     BatchNorm2d-125            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-126            [-1, 512, 8, 8]               0\n",
            "          Conv2d-127           [-1, 1024, 8, 8]         524,288\n",
            "     BatchNorm2d-128           [-1, 1024, 8, 8]           2,048\n",
            "            ReLU-129           [-1, 1024, 8, 8]               0\n",
            "      Bottleneck-130           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-131            [-1, 512, 8, 8]         524,288\n",
            "     BatchNorm2d-132            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-133            [-1, 512, 8, 8]               0\n",
            "          Conv2d-134            [-1, 512, 8, 8]          73,728\n",
            "     BatchNorm2d-135            [-1, 512, 8, 8]           1,024\n",
            "            ReLU-136            [-1, 512, 8, 8]               0\n",
            "          Conv2d-137           [-1, 1024, 8, 8]         524,288\n",
            "     BatchNorm2d-138           [-1, 1024, 8, 8]           2,048\n",
            "            ReLU-139           [-1, 1024, 8, 8]               0\n",
            "      Bottleneck-140           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-141           [-1, 1024, 8, 8]       1,048,576\n",
            "     BatchNorm2d-142           [-1, 1024, 8, 8]           2,048\n",
            "            ReLU-143           [-1, 1024, 8, 8]               0\n",
            "          Conv2d-144           [-1, 1024, 4, 4]         294,912\n",
            "     BatchNorm2d-145           [-1, 1024, 4, 4]           2,048\n",
            "            ReLU-146           [-1, 1024, 4, 4]               0\n",
            "          Conv2d-147           [-1, 2048, 4, 4]       2,097,152\n",
            "     BatchNorm2d-148           [-1, 2048, 4, 4]           4,096\n",
            "          Conv2d-149           [-1, 2048, 4, 4]       2,097,152\n",
            "     BatchNorm2d-150           [-1, 2048, 4, 4]           4,096\n",
            "            ReLU-151           [-1, 2048, 4, 4]               0\n",
            "      Bottleneck-152           [-1, 2048, 4, 4]               0\n",
            "          Conv2d-153           [-1, 1024, 4, 4]       2,097,152\n",
            "     BatchNorm2d-154           [-1, 1024, 4, 4]           2,048\n",
            "            ReLU-155           [-1, 1024, 4, 4]               0\n",
            "          Conv2d-156           [-1, 1024, 4, 4]         294,912\n",
            "     BatchNorm2d-157           [-1, 1024, 4, 4]           2,048\n",
            "            ReLU-158           [-1, 1024, 4, 4]               0\n",
            "          Conv2d-159           [-1, 2048, 4, 4]       2,097,152\n",
            "     BatchNorm2d-160           [-1, 2048, 4, 4]           4,096\n",
            "            ReLU-161           [-1, 2048, 4, 4]               0\n",
            "      Bottleneck-162           [-1, 2048, 4, 4]               0\n",
            "          Conv2d-163           [-1, 1024, 4, 4]       2,097,152\n",
            "     BatchNorm2d-164           [-1, 1024, 4, 4]           2,048\n",
            "            ReLU-165           [-1, 1024, 4, 4]               0\n",
            "          Conv2d-166           [-1, 1024, 4, 4]         294,912\n",
            "     BatchNorm2d-167           [-1, 1024, 4, 4]           2,048\n",
            "            ReLU-168           [-1, 1024, 4, 4]               0\n",
            "          Conv2d-169           [-1, 2048, 4, 4]       2,097,152\n",
            "     BatchNorm2d-170           [-1, 2048, 4, 4]           4,096\n",
            "            ReLU-171           [-1, 2048, 4, 4]               0\n",
            "      Bottleneck-172           [-1, 2048, 4, 4]               0\n",
            "AdaptiveAvgPool2d-173           [-1, 2048, 1, 1]               0\n",
            "          Linear-174                   [-1, 83]         170,067\n",
            "================================================================\n",
            "Total params: 23,149,971\n",
            "Trainable params: 23,140,435\n",
            "Non-trainable params: 9,536\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.19\n",
            "Forward/backward pass size (MB): 118.14\n",
            "Params size (MB): 88.31\n",
            "Estimated Total Size (MB): 206.64\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HMYBprKm6TfB"
      },
      "outputs": [],
      "source": [
        "import torch, gc\n",
        "gc.collect()\n",
        "torch.cuda.empty_cache()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5KXu5dIQ6TfD"
      },
      "source": [
        "모델 학습과 검증을 위한 함수"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mjQCJTOn6TfE"
      },
      "outputs": [],
      "source": [
        "train_losses = []\n",
        "val_losses = []\n",
        "train_acc = []\n",
        "val_acc = []\n",
        "\n",
        "import time\n",
        "import copy\n",
        "\n",
        "def train_resnet(model, criterion, optimizer, scheduler, num_epochs=EPOCH):\n",
        "\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc = 0.0\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print('-------------------epoch {}----------------------'.format(epoch+1))\n",
        "        since = time.time()\n",
        "\n",
        "        for phase in ['train', 'val']:\n",
        "            if phase == 'train':\n",
        "                model.train()\n",
        "            else:\n",
        "                model.eval()\n",
        "            \n",
        "            running_loss = 0.0\n",
        "            running_corrects = 0\n",
        "\n",
        "            for inputs, labels in dataloaders[phase]:\n",
        "                inputs = inputs.to(DEVICE)\n",
        "                labels = labels.to(DEVICE)\n",
        "\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "                with torch.set_grad_enabled(phase == 'train'):\n",
        "                    outputs = model(inputs)\n",
        "                    _, preds = torch.max(outputs, 1)\n",
        "                    loss = criterion(outputs, labels)\n",
        "    \n",
        "                    if phase == 'train':\n",
        "                        loss.backward()\n",
        "                        optimizer.step()\n",
        "\n",
        "                running_loss += loss.item() * inputs.size(0)\n",
        "                running_corrects += torch.sum(preds == labels.data)\n",
        "\n",
        "            if phase == 'train':\n",
        "                scheduler.step()\n",
        "                l_r = [x['lr'] for x in optimizer_ft.param_groups]\n",
        "                print('learning rate: ', l_r)\n",
        "\n",
        "            epoch_loss = running_loss/dataset_sizes[phase]\n",
        "            epoch_acc = running_corrects.double()/dataset_sizes[phase]\n",
        "            train_losses.append(running_loss/dataset_sizes['train'])            \n",
        "            train_acc.append(running_corrects.double()/dataset_sizes['train'])\n",
        "            val_losses.append(epoch_loss)\n",
        "            val_acc.append(epoch_acc)\n",
        "            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n",
        "\n",
        "            if phase == 'val' and epoch_acc > best_acc:\n",
        "                best_acc = epoch_acc\n",
        "                best_model_wts = copy.deepcopy(model.state_dict())\n",
        "\n",
        "        time_elapsed = time.time() - since\n",
        "        print('Completed in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))\n",
        "    \n",
        "    print('Best val Acc: {:4f}'.format(best_acc))\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8EJ4NOpw6TfE"
      },
      "source": [
        "모델 저장"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k4gLcwdt6TfE",
        "outputId": "4735c647-037d-4d2b-8d32-d11aa00f4adf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------epoch 1----------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "learning rate:  [0.001]\n",
            "train Loss: 3.3445 Acc: 0.2774\n",
            "val Loss: 2.6632 Acc: 0.4382\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 2----------------------\n",
            "learning rate:  [0.001]\n",
            "train Loss: 1.8045 Acc: 0.5415\n",
            "val Loss: 1.7638 Acc: 0.5691\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 3----------------------\n",
            "learning rate:  [0.0005]\n",
            "train Loss: 1.1137 Acc: 0.6837\n",
            "val Loss: 1.2487 Acc: 0.6418\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 4----------------------\n",
            "learning rate:  [0.0005]\n",
            "train Loss: 0.6347 Acc: 0.8178\n",
            "val Loss: 0.7708 Acc: 0.7691\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 5----------------------\n",
            "learning rate:  [0.0005]\n",
            "train Loss: 0.3788 Acc: 0.8967\n",
            "val Loss: 0.6616 Acc: 0.8218\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 6----------------------\n",
            "learning rate:  [0.00025]\n",
            "train Loss: 0.2401 Acc: 0.9391\n",
            "val Loss: 0.7271 Acc: 0.8164\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 7----------------------\n",
            "learning rate:  [0.00025]\n",
            "train Loss: 0.1499 Acc: 0.9640\n",
            "val Loss: 0.5236 Acc: 0.8582\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 8----------------------\n",
            "learning rate:  [0.00025]\n",
            "train Loss: 0.0675 Acc: 0.9890\n",
            "val Loss: 0.4782 Acc: 0.8655\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 9----------------------\n",
            "learning rate:  [0.000125]\n",
            "train Loss: 0.0590 Acc: 0.9884\n",
            "val Loss: 0.5082 Acc: 0.8636\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 10----------------------\n",
            "learning rate:  [0.000125]\n",
            "train Loss: 0.0378 Acc: 0.9977\n",
            "val Loss: 0.4524 Acc: 0.8727\n",
            "Completed in 0m 10s\n",
            "-------------------epoch 11----------------------\n",
            "learning rate:  [0.000125]\n",
            "train Loss: 0.0270 Acc: 0.9977\n",
            "val Loss: 0.4666 Acc: 0.8709\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 12----------------------\n",
            "learning rate:  [6.25e-05]\n",
            "train Loss: 0.0282 Acc: 0.9977\n",
            "val Loss: 0.4534 Acc: 0.8727\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 13----------------------\n",
            "learning rate:  [6.25e-05]\n",
            "train Loss: 0.0182 Acc: 0.9994\n",
            "val Loss: 0.4406 Acc: 0.8782\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 14----------------------\n",
            "learning rate:  [6.25e-05]\n",
            "train Loss: 0.0164 Acc: 0.9994\n",
            "val Loss: 0.4368 Acc: 0.8818\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 15----------------------\n",
            "learning rate:  [3.125e-05]\n",
            "train Loss: 0.0168 Acc: 0.9994\n",
            "val Loss: 0.4201 Acc: 0.8873\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 16----------------------\n",
            "learning rate:  [3.125e-05]\n",
            "train Loss: 0.0133 Acc: 0.9994\n",
            "val Loss: 0.4416 Acc: 0.8745\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 17----------------------\n",
            "learning rate:  [3.125e-05]\n",
            "train Loss: 0.0141 Acc: 0.9988\n",
            "val Loss: 0.4334 Acc: 0.8764\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 18----------------------\n",
            "learning rate:  [1.5625e-05]\n",
            "train Loss: 0.0137 Acc: 0.9988\n",
            "val Loss: 0.4335 Acc: 0.8855\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 19----------------------\n",
            "learning rate:  [1.5625e-05]\n",
            "train Loss: 0.0132 Acc: 0.9994\n",
            "val Loss: 0.4315 Acc: 0.8764\n",
            "Completed in 0m 9s\n",
            "-------------------epoch 20----------------------\n",
            "learning rate:  [1.5625e-05]\n",
            "train Loss: 0.0106 Acc: 1.0000\n",
            "val Loss: 0.4266 Acc: 0.8836\n",
            "Completed in 0m 9s\n",
            "Best val Acc: 0.887273\n"
          ]
        }
      ],
      "source": [
        "model_resnet34 = train_resnet(resnet, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=EPOCH)\n",
        "torch.save(model_resnet34, 'resnext50_complex_4.pt')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "loss, acc 시각화"
      ],
      "metadata": {
        "id": "WE7iVY4r8DiF"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "CvGwSbMe6TfF",
        "outputId": "8ad0d891-f266-4524-d708-37bf5cacee70"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.3444653812426157, 1.8044894071629902, 1.1137433671633032, 0.6346704782404597, 0.3788142487432676, 0.24009542736250233, 0.14990010298464232, 0.06750727085330703, 0.0590298765728675, 0.037799277328261785, 0.027015226810426816, 0.028206071014787937, 0.01821627092476906, 0.0164037853516141, 0.0167971331879142, 0.013349482691800843, 0.01414299423217739, 0.013653003661479807, 0.013198527770178546, 0.01061933807914107]\n",
            "[2.6631582975387573, 1.7638254382393577, 1.2487425912510266, 0.7707688266580756, 0.6615538136525587, 0.7271466742862355, 0.5235706296834078, 0.47817776148969476, 0.5082026313651692, 0.4524311951615594, 0.4665767523375424, 0.45339932495897467, 0.44056268307295715, 0.436776800589128, 0.4201160547408191, 0.44157727333632385, 0.4334309277209369, 0.4334761310707439, 0.4314512407237833, 0.42655939202417026]\n"
          ]
        }
      ],
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "plt.title(\"Loss During Training\")\n",
        "plt.plot(train_losses[0::2],label=\"T\")\n",
        "plt.plot(val_losses[1::2],label=\"V\")\n",
        "plt.xlabel(\"epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "print(train_losses[0::2])\n",
        "print(val_losses[1::2])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_acc = torch.as_tensor(train_acc)\n",
        "train_acc = train_acc.tolist()\n",
        "val_acc = torch.as_tensor(val_acc)\n",
        "val_acc = val_acc.tolist()\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.title(\"ACC During Training\")\n",
        "plt.plot(train_acc[0::2],label=\"T\")\n",
        "plt.plot(val_acc[1::2],label=\"V\")\n",
        "plt.xlabel(\"epochs\")\n",
        "plt.ylabel(\"Acc\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "print(train_acc[0::2])\n",
        "print(val_acc[1::2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "66ATXM-4C8b1",
        "outputId": "34b607b3-1b84-457b-b460-86dfd15dd5dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.277423099245502, 0.5414973882762624, 0.6836912362159026, 0.8177597214161346, 0.8966918165989554, 0.93905977945444, 0.9640162507254788, 0.9889727219965178, 0.9883923389437028, 0.9976784677887406, 0.9976784677887406, 0.9976784677887406, 0.9994196169471852, 0.9994196169471852, 0.9994196169471852, 0.9994196169471852, 0.9988392338943702, 0.9988392338943702, 0.9994196169471852, 1.0]\n",
            "[0.4381818181818182, 0.5690909090909091, 0.6418181818181818, 0.769090909090909, 0.8218181818181818, 0.8163636363636364, 0.8581818181818182, 0.8654545454545455, 0.8636363636363636, 0.8727272727272727, 0.8709090909090909, 0.8727272727272727, 0.8781818181818182, 0.8818181818181818, 0.8872727272727273, 0.8745454545454545, 0.8763636363636363, 0.8854545454545455, 0.8763636363636363, 0.8836363636363637]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "테스트 데이터 로딩"
      ],
      "metadata": {
        "id": "gPIKbDYN8Vrr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "transform_resnet = transforms.Compose([\n",
        "    transforms.Resize([128,128]),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "    ])\n",
        "\n",
        "test_resnet = ImageFolder(root='/content/drive/MyDrive/splitted9/test', transform=transform_resnet)\n",
        "test_loader_resnet = torch.utils.data.DataLoader(test_resnet, batch_size=BATCH_SIZE, shuffle=True, num_workers=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GtJsAjQZ8UaL",
        "outputId": "4dada40b-d2b7-4afc-f313-11d6dbad9ca1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "모델 평가 함수 구축"
      ],
      "metadata": {
        "id": "bnPVHNlc8MCH"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "we46znKv6TfF"
      },
      "outputs": [],
      "source": [
        "def evaluate1(model, test_loader):\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(DEVICE), target.to(DEVICE)\n",
        "            output = model(data)\n",
        "\n",
        "            test_loss += F.cross_entropy(output, target, reduction='sum').item()\n",
        "\n",
        "            pred = output.max(1, keepdim=True)[1]\n",
        "            #pred = torch.topk(outputs, 5)\n",
        "            #correct = pred.eq(target.view(1, -1).expand_as(pred))\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    test_accuracy = 100 * correct / len(test_loader.dataset)\n",
        "    return test_loss, test_accuracy"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate5(model, test_loader):\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(DEVICE), target.to(DEVICE)\n",
        "            output = model(data)\n",
        "\n",
        "            test_loss += F.cross_entropy(output, target, reduction='sum').item()\n",
        "\n",
        "            maxk = max((1,5))\n",
        "            target_resize = target.view(-1,1)\n",
        "            _, pred = output.topk(maxk, 1, True, True)\n",
        "            correct += torch.eq(pred, target_resize).sum().float().item()\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    test_accuracy = 100 * correct / len(test_loader.dataset)\n",
        "    return test_loss, test_accuracy\n"
      ],
      "metadata": {
        "id": "RmZEJS6ZXY4a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "모델 평가"
      ],
      "metadata": {
        "id": "aQKOBvCl8uJl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "resnet=torch.load('/content/drive/MyDrive/resnext50_complex_4.pt')\n",
        "resnet.eval()\n",
        "test_loss1, test_accuracy1 = evaluate1(resnet, test_loader_resnet)\n",
        "\n",
        "print('ResNet test acc top1:  ', test_accuracy1)\n",
        "\n",
        "correct_pred = {class_name: 0 for class_name in class_names}\n",
        "#print(correct_pred)\n",
        "total_pred = {class_name: 0 for class_name in class_names}\n",
        "#print(total_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "G4wXb8toZnXc",
        "outputId": "d3ef4fec-f8ac-4655-e2e5-6cc3e491550d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-65709e0393b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mresnet\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/resnext50_complex_4.pt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mresnet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtest_loss1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_accuracy1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresnet\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_loader_resnet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ResNet test acc top1:  '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_accuracy1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-7-11c2762c2b7e>\u001b[0m in \u001b[0;36mevaluate1\u001b[0;34m(model, test_loader)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDEVICE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDEVICE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    650\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    651\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 652\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    653\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1329\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shutdown\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1330\u001b[0;31m             \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1331\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1332\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_get_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1294\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1295\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1296\u001b[0;31m                 \u001b[0msuccess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1297\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1298\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_try_get_data\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0;31m#   (bool: whether successfully get data, any: data if successful else None)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1133\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1134\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1135\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1136\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/queues.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m                     \u001b[0mtimeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeadline\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonotonic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mpoll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_poll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(object_list, timeout)\u001b[0m\n\u001b[1;32m    919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    920\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 921\u001b[0;31m                 \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    922\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    923\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileobj\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    414\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 415\u001b[0;31m             \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_selector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    416\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PNvDt4El6TfG"
      },
      "outputs": [],
      "source": [
        "resnet=torch.load('/content/drive/MyDrive/resnext50_complex_4.pt')\n",
        "resnet.eval()\n",
        "\n",
        "test_loss5, test_accuracy5 = evaluate5(resnet, test_loader_resnet)\n",
        "\n",
        "evaluate5(resnet, test_loader_resnet)\n",
        "print('ResNet test acc top5:  ', test_accuracy5)\n",
        "\n",
        "correct_pred5 = {class_name: 0 for class_name in class_names}\n",
        "#print(correct_pred5)\n",
        "total_pred5 = {class_name: 0 for class_name in class_names}\n",
        "#print(total_pred5)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "클래스별 정답률 함수 구축"
      ],
      "metadata": {
        "id": "tHdE7Dx08xN_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TqEHX_kO6TfH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "outputId": "506d40ae-56ad-48f7-e464-b03ec9721c93"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-4cbaf857ef7d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# again no gradients needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest_loader_resnet\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDEVICE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDEVICE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    650\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    651\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 652\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    653\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1329\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shutdown\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1330\u001b[0;31m             \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1331\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tasks_outstanding\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1332\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_get_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1294\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1295\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1296\u001b[0;31m                 \u001b[0msuccess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_get_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1297\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1298\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_try_get_data\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0;31m#   (bool: whether successfully get data, any: data if successful else None)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1133\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1134\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1135\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1136\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/queues.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m                     \u001b[0mtimeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeadline\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonotonic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mpoll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_poll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(object_list, timeout)\u001b[0m\n\u001b[1;32m    919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    920\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 921\u001b[0;31m                 \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    922\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    923\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileobj\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.7/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    414\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 415\u001b[0;31m             \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_selector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    416\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "# again no gradients needed\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader_resnet:\n",
        "        data, target = data.to(DEVICE), target.to(DEVICE)\n",
        "        output = resnet(data)\n",
        "        \n",
        "        #get the maximum of tensor\n",
        "        _, predictions = torch.max(output, 1)\n",
        "        \n",
        "        # collect the correct predictions for each class\n",
        "        for label, prediction in zip(target, predictions):\n",
        "            if label == prediction:\n",
        "                correct_pred[class_names[label]] += 1\n",
        "                \n",
        "            total_pred[class_names[label]] += 1\n",
        "            pass\n",
        "        pass\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "클래스별 정답률 리턴"
      ],
      "metadata": {
        "id": "0ACIqzg682fb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "porLr6Xo6TfH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "outputId": "347ddf82-39a8-4976-ffa4-589a4461d733"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-71a4f4492ede>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mclass_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcorrect_count\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcorrect_pred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrect_count\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mtotal_pred\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mclass_name\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Accuracy for class: {class_name:5s} is {accuracy:.1f} %'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'correct_pred' is not defined"
          ]
        }
      ],
      "source": [
        "for class_name, correct_count in correct_pred.items():\n",
        "    accuracy = 100 * float(correct_count) / total_pred[class_name]\n",
        "    print(f'Accuracy for class: {class_name:5s} is {accuracy:.1f} %')\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "실제 파일 가지고 테스트"
      ],
      "metadata": {
        "id": "YRti-nKu87u0"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "id": "Att33PWX6TfI",
        "outputId": "590089b1-7990-464e-9fd7-deee63bf7b13"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "예측 결과: \n",
            "삽2\n",
            "올\n",
            "압2\n",
            "사2\n",
            "며\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:29: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.9986681938171387, 0.0005555687821470201, 0.00024732170277275145, 0.0001713356759864837, 8.005284325918183e-05]]\n"
          ]
        }
      ],
      "source": [
        "from PIL import Image\n",
        "import numpy as np\n",
        "import time\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "resnet=torch.load('/content/drive/MyDrive/resnext50_complex_4.pt')\n",
        " \n",
        "def sigmoid(x):\n",
        "    return 1 / (1 +np.exp(-x))\n",
        "\n",
        "def imshow(input):\n",
        "    # torch.Tensor를 numpy 객체로 변환\n",
        "    input = input.numpy().transpose((1, 2, 0))\n",
        "    # 이미지 정규화 해제하기\n",
        "    mean = np.array([0.485, 0.456, 0.406])\n",
        "    std = np.array([0.229, 0.224, 0.225])\n",
        "    input = std * input + mean\n",
        "    input = np.clip(input, 0, 1)\n",
        "    # 이미지 출력\n",
        "    plt.imshow(input)\n",
        "    plt.show()\n",
        "\n",
        "image = Image.open('/content/drive/MyDrive/image/1-081.jpg')\n",
        "image = transform_resnet(image).unsqueeze(0).to(DEVICE)\n",
        "\n",
        "with torch.no_grad():\n",
        "    outputs = resnet(image)\n",
        "    l = torch.nn.functional.softmax(outputs)\n",
        "    indices = torch.topk(l, 5).indices\n",
        "    values = torch.topk(l, 5).values\n",
        "    print('예측 결과: ')\n",
        "    for x in indices[0]:\n",
        "        print(class_names[x.item()])\n",
        "\n",
        "    imshow(image.cpu().data[0])\n",
        "    values = torch.as_tensor(values)\n",
        "    values = values.tolist()\n",
        "    print(values)   "
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "interpreter": {
      "hash": "eb0a91b42e1219dc6577959eb753a377f701c2027602629337c9b215bd348f28"
    },
    "kernelspec": {
      "display_name": "Python 3.9.6 64-bit (system)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "d666054e26924af4bc7c125cb8af843c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b8e75e93c1164398a432357f35f2f09f",
              "IPY_MODEL_5eac87ea963746f79966cde0df82665b",
              "IPY_MODEL_e036303ab5ab42b09871cb5a989f9537"
            ],
            "layout": "IPY_MODEL_96f182f4512040fa8406cb1d763949de"
          }
        },
        "b8e75e93c1164398a432357f35f2f09f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_88b52903779641ae9bdd40306538ed5e",
            "placeholder": "​",
            "style": "IPY_MODEL_20a51ba852494031ad1b916ec09bb55e",
            "value": "100%"
          }
        },
        "5eac87ea963746f79966cde0df82665b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_26241335e2914722b67a12ef487c8f7f",
            "max": 100441675,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e5497e555f1e4bb398d469c7ef343ca7",
            "value": 100441675
          }
        },
        "e036303ab5ab42b09871cb5a989f9537": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bfd3a453aaaf443ca821b3ae7c4d47b9",
            "placeholder": "​",
            "style": "IPY_MODEL_f5a531ce0f8d4dcca8d525466a0ca1f3",
            "value": " 95.8M/95.8M [00:03&lt;00:00, 74.1MB/s]"
          }
        },
        "96f182f4512040fa8406cb1d763949de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "88b52903779641ae9bdd40306538ed5e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "20a51ba852494031ad1b916ec09bb55e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "26241335e2914722b67a12ef487c8f7f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5497e555f1e4bb398d469c7ef343ca7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bfd3a453aaaf443ca821b3ae7c4d47b9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f5a531ce0f8d4dcca8d525466a0ca1f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
